@page "/game"

@using System.Timers
@using Microsoft.Extensions.Logging;
@using RussianKaruta.Data

@implements IDisposable

@inject ILogger<Game> _logger;

<div class="d-flex flex-column justify-content-between align-items-center h-100">
	<NavLink class="btn btn-light btn-lg mb-3 align-self-start" href="/">Назад</NavLink>

	@if (isStarted)
	{
		<div class="card-view mb-3">
			<img src="@currentCard.ImgSrc" />
			@if (!isChangePoints)
			{
				<div class="card-timer">@currentWaiting</div>
			}
		</div>
		<div class="card-title">@currentCard.Name</div>
	}
	else
	{
		if (isEnd)
		{
			<h2>Победитель - игрок @(playerOneCards == 0 ? "слева" : "справа")</h2>
		}

		if (!isRemember)
		{
			<button type="button" class="btn btn-light btn-lg" @onclick="@InitGame">@(isEnd ? "Начать заново" : "Старт")</button>
		}
	}

	@if (isRemember)
	{
		<div class="timer">@(rememberTime.ToString())</div>
		<button type="button" class="btn btn-light btn-lg" @onclick="@StartGame">Начать игру</button>
	}

	<div class="d-flex justify-content-between align-items-end w-100">
		<div class="points d-flex flex-column align-items-center">
			<div class="mb-2">@playerOneCards</div>
			<div class="btn-group">
				<button disabled="@(!isChangePoints)" class="btn btn-primary btn-lg" @onclick="() => ChangeCardsCount(1, 1)">+</button>
				<button disabled="@(!isChangePoints)" class="btn btn-danger btn-lg" @onclick="() => ChangeCardsCount(1, -1)">-</button>
			</div>
		</div>
		@if (isChangePoints && !isEnd)
		{
			<button disabled="@(!isChangedPoints)" class="btn btn-light btn-lg" @onclick="PlayGame">Далее</button>
		}
		<div class="points d-flex flex-column align-items-center">
			<div class="mb-2">@playerTwoCards</div>
			<div class="btn-group">
				<button disabled="@(!isChangePoints)" class="btn btn-primary btn-lg" @onclick="() => ChangeCardsCount(2, 1)">+</button>
				<button disabled="@(!isChangePoints)" class="btn btn-danger btn-lg" @onclick="() => ChangeCardsCount(2, -1)">-</button>
			</div>
		</div>
	</div>
</div>

<audio autoplay src="@audioSrc"></audio>

@code{

	// Page state

	private bool isStarted { get; set; }

	private bool isEnd { get; set; }

	private bool isRemember { get; set; }

	private string audioSrc { get; set; }



	// Remember state

	private TimeSpan maxRememberTime { get; set; } = new TimeSpan(0, 5, 0);

	private TimeSpan rememberTime { get; set; }

	private Timer timerRemember { get; set; } = new();



	// Game state

	private Card defaultCard = new Card() { ImgSrc = "images/shirt.png", Name = "" };

	private Card currentCard { get; set; }

	private int currentCardIndex { get; set; }

	private List<Card> cards { get; set; }

	private int totalWaiting = 5;

	private int currentWaiting;

	private Timer timerGame { get; set; } = new();

	private Random random { get; set; } = new Random();



	// Players state

	private int playerOneCards { get; set; }

	private int playerTwoCards { get; set; }

	private bool isChangePoints { get; set; }

	private bool isChangedPoints { get; set; }



	// Steps initializers

	private void InitGame()
	{
		// Page state
		isStarted = false;
		isEnd = false;
		isRemember = true;

		// Cards init
		cards = (List<Card>)CardsInitializer.GetCards();

		// Players state
		playerOneCards = cards.Count() / 2;
		playerTwoCards = playerOneCards;
		isChangePoints = false;
		isChangedPoints = false;

		// Remember step
		rememberTime = maxRememberTime;
		timerRemember.Start();
	}

	private async void RememberStateChange(object? sender, ElapsedEventArgs e)
	{
		if (rememberTime.TotalSeconds == 0)
		{
			StartGame();
		}
		else
		{
			rememberTime = rememberTime.Subtract(new TimeSpan(0, 0, 1));
		}

		await InvokeAsync(StateHasChanged);
	}

	private void StartGame()
	{
		// init page state
		isStarted = true;
		isRemember = false;

		timerRemember.Stop();

		PlayGame();
	}

	private void PlayGame()
	{
		if (playerOneCards == 0 || playerTwoCards == 0)
		{
			EndGame();

			return;
		}

		// init waiting step view
		currentCard = defaultCard;
		currentWaiting = totalWaiting;

		// disallow change points before open card
		isChangePoints = false;
		isChangedPoints = false;

		// start waiting
		timerGame.Start();
	}

	private async void GameStateChange(object? sender, ElapsedEventArgs e)
	{
		if (currentWaiting > 0)
		{
			currentWaiting--;

			if (currentWaiting == 0)
			{
				currentCardIndex = random.Next(0, cards.Count());

				audioSrc = cards[currentCardIndex].AudioSrc;
			}
		}
		else
		{
			currentCard = cards[currentCardIndex];

			cards.RemoveAt(currentCardIndex);

			isChangePoints = true;

			timerGame.Stop();
		}

		await InvokeAsync(StateHasChanged);
	}

	private void EndGame()
	{
		isStarted = false;
		isEnd = true;
		isChangePoints = false;

		audioSrc = playerOneCards == 0 ? "audio/winner_left.mp3" : "audio/winner_right.mp3";
	}

	



	// Lifecycle

	protected override async Task OnInitializedAsync()
	{
		_logger?.Log(LogLevel.Information, "Init page Game");

		timerGame.Interval = 1000;

		timerGame.Elapsed += GameStateChange;

		timerRemember.Interval = 1000;

		timerRemember.Elapsed += RememberStateChange;

		await base.OnInitializedAsync();
	}



	// Calbacks

	private void ChangeCardsCount(int playerNumber, int count)
	{
		if (playerNumber == 1 && playerOneCards + count >= 0)
			playerOneCards += count;
		
		if (playerNumber == 2 && playerTwoCards + count >= 0)
			playerTwoCards += count;

		isChangedPoints = true;
	}



	// Dispose

	public void Dispose()
	{
		timerGame.Stop();
		timerGame.Dispose();

		timerRemember.Stop();
		timerRemember.Dispose();
	}
}